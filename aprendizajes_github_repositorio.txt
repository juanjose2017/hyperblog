//todo lo que inicia con asterisco son codigos
//todo lo que inicia con numeral son enseñanzas tecnicas

*git init -> inicia el repositorio en la carpeta
*git add archivo.txt ->adiciona el archivo 
*git commit -m "comentario" ->lo envia al repositorio con un comentario que mantiene la higiene del codigo
*git status ->mira los archivos que le falta por subir al repositorio actualizados
*git log archivo.txt -> mira el historial de cambios en el archivo en GIT
*git push -> enviar hacia otro repositorio lo que hacemos
*pull -> tiramos cosas de otro repositorio
*git show -> muestra cambios historicos en todos los archivos
git add. ->agrega todos los archivos que hayan cambiado
#se instala GIT en el computador desde la página
#mostrar las extensiones de archivo en el SO ??
#el profesor Recomienda utilizar Visual Studio Code (mas adelante)

comandos Linux-terminal (se windows con la terminal de GIT ya instalada:
*ls ->lista de archivos donde está
*ls -al ->muestra todos los archivos en una lista, incluidos los ocultos
*ls -a ->muestra todos los archivos , incluso los ocultos pero sin lista
*ls -l ->muestra todos los archivos en lista pero no los ocultos
*cd / ->nos ubica en home, osea la carpeta de mi usuario en usuarios
*el simbólo "~" (alt+126) ->indica que esta en ruta de mis documentos o de usuario
*pwd -> nos muestra en que ruta nos encontramos
*cd .. ->nos devolvemos un directorio
*clear ->limpia
*ctrl + L  -> limpia también
#en cmd no importa las mayusculas en Linux sí importa
*cd archivo1->entra a la carpeta "archivo1" en la ruta
*touch vacio.txt ->me permite crear un archivo vacio en txt llamado vacio
*cat vacio.txt ->me permite ver en la consola rapidamente el contenido de vacio.txt
*history ->muestra toda la historia de comandos que he escrito en esa consola, en una lista con numeros
* !72 + enter ->me escribe automaticamente el comando número 72 de la lista del historial "history"
*rm vacio.txt ->borra el archivo "vacio.txt"
*rm --help ->muestra todas las opciones para el comando "rm"

*pwd -> mirar la ruta donde me encuentro
*git init ->indica donde esta mi carpeta raíz de la pagina (en este caso donde esta el index)
#en la carpeta ".git" oculta queda la base de datos de los cambios "atomicos" al sistema (cambios atomicos: cada unio de los cambios se guarda de una manera independiente)
*code ->abre Visual Studio Code

*git add archivo.txt ->añade el archivo en la chache del pc
*git rm --cached mi_archivo.txt  ->deshace el status si nos equivocamos (porque borra el archivo de la cache y del repositorio, pero no del disco duro)
*git commit -m "primer comit" ->manda el archivo al repositorio, es importanter tener la cultura de comentar cada cosa que sube para saber que cambios se hicieron
*git config ->muestra toda la configuración de git
*git config --list ->muestra la configuracion por defecto de git
*git config --list --show-origin ->muestra donde estan las configuraciones guardadas en el pc
*git onfig --global user.name "nombre de usuario"->el nombre del usuario va entre comillas, configura el usuario global (los #dos guiones "--global" significa que va aacceder un comando de una palabra , con un solo guion "-l" para acceder rapidamente a un comando
*git config --global user.email "micorreo@gmail.com" ->configura correo electronico
*"git add ." ->sube todos los archivos restantes
*cuando hacemos git log archivo.txt y muestra (HEAD ->MASTER) significa que es el ultimo archivo modificado

**** material platzi*****
Si por algún motivo te equivocaste en el nombre o email que configuraste al principio, lo puedes modificar de la siguiente manera:
git config --global --replace-all user.name “Aquí va tu nombre modificado”
O si lo deseas eliminar y añadir uno nuevo
git config --global --unset-all user.name :Elimina el nombre del usuario
git config --global --add user.name “Aquí va tu nombre”
*****************
*git show archivo.txt ->muestra los cambios en un archivo, es importante cuando tienes un ocdigo que se dañó o rompió y quieres buscar el error
#diff : quiere decir que git mezcla la version actual y anterior de un archivo
*git commit ->no va a enviar el commit pero nos va a "abrir" el archivo en consola(llamada VIM, es un editor de codigo, ahí mismo digitamos el mensaje de commit y para salir de alli digitamos ESC+SHIFT+ZZ (ese comando fuerza el guardado en ese editor, por eso se envia, tambien ESC+I, es el comando para iniciar a "editar" o escribir en ese editor) y quedara hecho el comit normal
#sihacemos cambio a un archivo y le damos git commit -m "mi comit" no lo va a subir porque falta hacer el git add archivo.txt antes
*git diff commitA (espacio) commitB -> (el commitA y commitB son seriales que estan despues de "commit:"), "son numeros y letras raras", recordar que commitA debe ser más nuevo que commitB->esto nos da los cambios hechos entre los dos commit
*git add archivo.txt ->pone el archivo en espera en la cache para ser guardado en el repositorio (/.git/)
#una vez damos commit -m "comentario" se sube al repositorio /.git/
#el nombre del repositorio /.git/ es master
#cuando a un archivo no se le ha dado "git add archivo.txt" significa q el archivo esta en ESTADO sin rastrear "UNTRACKED"
#cuando damos "git add archivo.txt" el archivo tiene el ESTADO "TRACKED" o rastreado o STAGING
#cuando damos commit -m pasan de estar en STAGING a ser subidos al repositorio
#STAGING es una area de preparación o temporal esperando a ser subido al repositorio
#en resumen de lo anterior: archivo TRACKED =ya tiene git add y git commit, archivo STAGED = tiene git add pero no git commit, archivo UNSTAGED = se dió GIT ADD y GIT COMMIT pero se modificó el archivo y no se ha subido nuevamente, archivo UNTRACKED = nunca se les ha dado git add ni git commit, si un archivo se le da git add y luego se lo modifico su ESTADO es STAGED y UNTRACKED a la vez (es divertido dice platzi) 
# un commit es un cambio de version del archivo ,v1 v2 v3
#- git rm --cached: Mueve los archivos que le indiquemos al estado Untracked.
#git rm --force: Elimina los archivos de Git y del disco duro. Git guarda el registro de la existencia de los archivos, por lo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
#en mi rama MASTER yo puedo crear copias de cualquier version y hacerle cambios, eso se llama RAMAS " Checkout"
# MERGE compara los cambios entre dos ramas
*git reset commitA --hard->nos permite volver a la version de ese commit, el HARD vuelve todo al estado anterior
*git reset commitA --soft ->lo mismo del anterior pero lo que está en STAGING sigue allí
*git diff ->cuando lo damos solo nos muestra la diferencia entre lo que esta en STAGING y lo que hay en el REPOSITORIO (o lo que tengo en el disco vs lo que esta en el repositorio)
*git log --stat ->muestra los cambios especificos en bites por cada commit
#con la letra "Q" puedo salirme del git log, (esto sucede cuando los cambios son más largos que lo que puedo ver en la pantalla)
*git checkout commitA archivo.txt ->esto devuelve en el tiempo el archivo.txt al commitA (si realizamos commit perderemos todos los cambios en el repositorio)
*git checkout master archivo.txt ->esto envia el archivo al MASTER (ultima version guardada en el repositorio)
#podemos navegar a traves del tiempo en el archivo y modificarlo y crear otro commit (version) con ello

########enseñanza de platzi#########
#git rm --cached: Elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro. Básicamente le dice a Git que deje de trackear el historial de cambios de estos archivos, por lo que pasaran a un estado untracked.
#git reset HEAD: Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto. -> nos sirve para deshacer el ultimo "git add"
###################

*git clone URL->clona el repositorio=trae todos los archivos a mi carpeta local y crea los archivos y sus historiales en el repositorio local
*git push ->envia al repositorio remoto
*git fetch->actualiza los cambios hechos en mi repositorio local que ya he clonado pero no lo copia en los archivos del directorio de trabajo
*git merge ->fuciona todos los archivos del repositorio local con el directorio de trabajo (crea los archivos)
*git pull->hace git fetch y git merge al tiempo

###########estos comandos los enseña platzi pero son largos, se puede omitir si no quieres profundizar:
git log --oneline:Te muestra el id commit y el título del commit.
git log --decorate: Te muestra donde se encuentra el head point en el log.
git log --stat: Explica el número de líneas que se cambiaron brevemente.
git log -p: Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog: Indica que commits ha realizado un usuario, mostrando el usuario y el título de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd": Muestra mensajes personalizados de los commits.
git log -3: Limitamos el número de commits.
git log --after=“2018-1-2”
git log --after=“today” y
git log --after=“2018-1-2” --before=“today”: Commits para localizar por fechas.
git log --author=“Name Author”: Commits hechos por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE”: Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i: Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html: Busca los commits en un archivo en específico.
git log -S “Por contenido”: Buscar los commits con el contenido dentro del archivo.
git log > log.txt: guardar los logs en un archivo txt
##################

*git commit -a ->hace commit sin necesidad de hacer git add a los archivos que ya se le habia hecho git add anteriormente, se escribe el commit en el editor y salimos (esc+shift+zz)
#la rama se crea desde el lugar donde estoy "git branch"
*git branch cabecera ->crea una rama de desarrollo "llamada cabecera"
*git checkout cabecera ->movemos el HEAD a la rama CABECERA
#cuando nos movemos de una rama a otra los archivos de mi directorio cambian deacuerdo a los commit hechos en esa rama

####enseñanza de platzi####
*git checkout -b rama: Genera una rama y nos mueve a ella automáticamente, Es decir, es la combinación de git brach y git checkout al mismo tiempo.
*git reset id-commit: Nos lleva a cualquier commit no importa la rama, ya que identificamos el id del tag., eliminando el historial de los commit posteriores al tag seleccionado.
*git checkout rama-o-id-commit: Nos lleva a cualquier commit sin borrar los commit posteriores al tag seleccionado.
#################

*git commit -am "mi comentario" ->hace commit sin necesidad de git add, aplica para los archivos que se les ha hecho git add en una ocasion anterior (osea que no son archivos nuevos)
*git branch ->muestra las ramas que tengo en una lista
#para hacer un merge nos paramos en la cabecera donde queremos que quede hecha la fusion, en este caso nos paramos en MASTER, automaticamente se crea un nuevo commit con esos cambios
*git merge mi_cabecera ->fusionamos la cabecera llamada "mi_cabecera" a la rama donde estamos parados: en este caso en la rama MASTER
#IMPORTANTE: a partir de Octubre de 2020, la rama MASTER cambió a MAIN, de ahora en adelante será todo Main
#entramos a github (web) y creamos un nuevo repositorio (a 9/marzo/2022 la opcion "+" en la parte superior derecha y damos "new repositorio"
#copiamos el enlace del repositrio creado, o del repositorio que nos queramos unir
#nos ubicamos en el fichero o directorio que queremos subir los archivos al repositorio
*git remote add origin "direccion URL de nuestro repositorio" ->nos conectamos al repositorio de esa direccion
*git remote -v ->nos muestra el repositorio remoto al que estamos conectados
*git branch -M main ->con esto pasamos todo el contenido de la rama MASTER a una rama nueva llamada MAIN, es obligatorio
*git push origin main ->git envia al ORIGEN (o direccion de repositorio) todo lo que tenemos en nuestra rama "main"
*git pull origin main --allow-unrelated-histories
*git remote remove origin ->removemos la conexion remota que tengamos para agregar la correcta (url http o ssh) (pro no la usé, la tengo por si las moscas)
#actualmente hay que crear un acces token (entra ahit hub web, settings, parte izquierda SSH and GPG Keys new key, y le damos las configuraciones, luego copiamos el key y lo pegamos cuando nos pida la contraseña en la consola, esto no está en Platzi
*git pull origin main ->me trae todos los archivos del repositorio online
#cuando subimos un repositorio este va a quedar con todos los commits hechos localmente antes de subirlo, no importa si han sido antes de la subida del proyecto online

####resumen para conectar un repositorio online####
creamos el repositorio en la pagina web de git hub
*git remote add origin URL ->conectarse a la URL de mi repositorio
*git remote -v ->para vera cual repositorio se conecto
*git pull origin master --allow-unrelated-histories ->trae todo del repositorio online para fusionarlas ya que tienen estructuras diferentes (con el README)
*git push origin main ->envia todo al repositorio online
###############

#lo que yo cifre con una llave publica solo lo puede abrir una llave privada
#para compartir un mensaje secreto debo usar llaves publicas y privadas
#estas son las instrucciones: yo creo una llave publica y una llave privada, envio la llave publica a mi amigo, el escribe su mensaje y lo mete en la llave publica y me lo regresa, luego yo con mi llave privada decifro el mensaje, nota:no puede compartir tu llave privada nunca
#las llaves son por persona y no por repositorio
#entramos en la carpeta home para crear la llave (en windows es C:/users/mi_usuario)
#priemro debemos confirmar el usuario "correo" que tenemos usando "git config -l"
*ssh-keygen -t rsa -b 4096 -C "tu@email.com" ->genera nuestra llave privada
#luego le damos enter para que la guarde en la ubicacion por defecto, (es una buena practica guardarla en home, y alli estamos ubicados)
#automaticamente crea en la ruta una carpeta ".ssh" alli se encuentran id_rsa.pub (que es la llave publica) y otro id_rsa (que es la llave privada)
#abrimos la llavew publica con Visual Studio Code y le damos ALT+Z para ampliarla
*eval $(ssh-agent -s) ->prueba si las llaves estan prendidas y debe votar un PID (ej: pid 4272)
* ~ ->nos ubica en HOME del ususario
*ssh-add ~/.ssh/id_rsa ->ingresa la llave privada (~ -> el simbolo de la ñ indica la ruta esta añadiedo la ruta donde esta ubicada esa llave (en resumen el codigo es: ssh-add ruta-donde-guardaste-tu-llave-privada)

##########ahora  estos pasos para la conexion github con SSH o llaves###########
#copiamos la llave publica toda a git hub en "SETINGS"->"SSH and GPG Keys"->"new ssh"->le ponemos un titulo ->luego pegamos la llave en el campo key->"Add SSH key" ->nos pide la contraseña->vamos al repositorio en git hub->vamos a la opcion "clone"->damos la opcion SSH ->y copiamos la URL->vamos a la carpeta del repositorio local->git remote -v (para mirar a que estamos conectados)->git remote set-url origin "mi URL"->git pull origin main (nos trae lo que hay en el repositorio)->git status (para mirar lo que nos falta)->git commit -am "micomentario"(recordemos que este codigo resume git add y git commit)-> git pull origin main (para evitar conflictos)->git push origin main (enviamos todo)
###################

#la palabra ORIGIN se puede cambiar por otro nombre
#cuando cambiemos o agreguemos un repositorio o URL  debemos traer primero todos los cambios con PULL
*git remote set-url origin "mi URL" ->nos cambia la conexion URL de ORIGIN a otra (se puede usar para cambiar a SSH la llaves publica y privada)
#me sucedio que no me entraban los comandos en la consola git porque no estaba ubicado en la carpeta del proyecto
#etiquetas
*git log --all --graph --decorate --oneline ->all:muestra todo, graph muestra la fusiones,decorate:lo muestra decorado,oneline:cada linea en una sola
*alias arbolito="git log --all --graph --decorate --oneline" ->le pone a esa linea de codigo el alias arbolito (solo hay que escribir en un futuro arbolito para que se ejecute la linea)
*git tag -a v0.1 -m "resultado de las prieras clases del curso" commitA ->crea el tag con nombre v0.1 y comentario "resultado......"
*git tag -> nos muestrael nombre de tag creados
*git show-ref --tags ->nos muestra el commit y el tag asociados
#es buena practicaenviar el TAG despues de hacerlo para que los demas lo identifiquen
#cada vez que vayamos a enviar tenemos antes que traer con git pull, esnecesario
*git push origin --tags ->envia el tag al repositorio
*git tag -d dormido ->borra el tag llamdo "dormido" del repositorio local pero queda en el repositorio online
* git push origin :refs/tags/dormido ->borra el tag (llamado dormido) del repositorio online 
*git show-branch ->muestra las cabeceras e historia de los ultimos cambios
*git show-branch --all ->muestra las cabeceras y su historia de cambios mas completa
*gitk ->abre un entorno grafico con las cabeceras tags y cambios que se han hecho completo, con codigo y todo
#para enviar cambios otra rama, hacemos pull en la que estamos, luego cambiamos a la rama deseada, luego hacemos pull estando parados en esa rama, y sube esa informacion al repositorio como una cabecera aparte del main
#crearemos 2 cabeceras llamadas header y footer para simular 2 cabeceras de 2 programadores diferentes, al crear una cabecera debemos estar situados en la version mas reciente por ejemplo la rama main
#cuando queremos clonar un repositorio (osea unirnos a el) debemos crear un directorio y con el nombre que queramos, estando parados en el damos git clone "url", hacemos un commit, luego git pull origin main (por si acaso), luego git push origin main
*git clone URL ->clona el proyecto de esa url desde que sea publico
#para agregar a un colaborador a un repositorio debemos ir a settings del repositorio, (solo del repositorio, no settings en general),luego colaborator,escribimos el correo en el campo y lo agregamos, los colaboradores tiene que tener el correo como publico y visible en su cuenta de git hub (pagina) (eso se hace en SETTINGS del usuario,luego emails,luego lo activan como publico,aunque no probe como hacerlo, no tuve problema con eso, ya estaba publico, se pueden buscar por correo o nombre de perfil), los colaboradores invitados deben entrar al correo electronico, abrir la invitacion y aceptarla
*git commit —amend ->corrige el commit "anterior"? hecho, es necesario hacer pull y push de nuevo, (platzi sugiere este: git push --set-upstream origin master)
#si somos colaboradores y tenemos nuestro email privado en github puede generar errores a la hora de hacer el push (puede salir: push declined due to email privacy restrictions)
#en el mundo profesional los colaboradores no puedes hace BRANCH (fusionar una rama) al MAIN asi como asi
#los colaboradores hacen su rama, y la fusionan (pero con un PULL REQUEST) con el STAGING en servidores (que es una version final pero de prueba en un servidor TEST antes de subirla al publicación real)
# un PULL REQUEST es un estado intermedio antes de fusionar con el MERGE, para que otros miembros del equipo miren los cambios y los aprueben para luego ejecutar el MERGE al STAGING de servidores
#PULL REQUEST es una caracteristica de GIT HUB y no de GIT
#GIT es la base de datos que me ayuda a tener ese historial de los cambios atomicos de mi proyecto
#GIT HUB es el sitio web que me permite trabajar con otros programadores en el mundo
#PULL REQUEST permite a colaboradores NO programadores aportar en una rama

####en plabras de platzi######
Para realizar pruebas enviamos el código a servidores que normalmente los llamamos staging develop (servidores de pruebas) luego de que se realizan las pruebas pertinentes tanto de código como de la aplicación estos pasan a el servidor de producción con el ya antes mencionado merge request.
#########################

#un archivo binario o imagen no se agrega a un repositorio, se ignora
# al master solo subo lo que estoy seguro va a quedar en el proyecto
#no se suben imagenes a github porque a medida que yo haga pull en mi repositorio local GIT  se van duplicar esas imagenes y se volverá muy pesado en git hub ¿y GIT?
*ctrl+shift+R ->forza la actualizacion de una pagina en el navegador (un F5 pero forzado)
#antes de cambiar a otra rama debo dar git commit porque osino se pierden los cambios
#el problema con las tildes en HTML se soluciona con UTF-8 (buscar aunque ya lo se)
#en github podemos ver todas las lineas de codigo que se han agregado en cada rama y por cada usuario
#al hacer un merge podemos continuar con pull para verificar queno haya un cambio adicional  y luego push para combinar las dos cosas (esto lo hace el administrador)
 
#######aprendizaje platzi########
pasos en un flujo de trabajo profesional:
1)Crear ramas
2)Asignar una rama a cada programador
3)El programador baja el repositorio con git pull origin master
4)El programador cambia de rama
5)El programador trabaja en esa rama y hace commits
6)El programador sube su trabajo con git push origin #nombre_rama
7)El encargado de organizar el proyecto baja, revisa y unifica todos los cambios
#########################
#creamos una rama llamada fix-typo
#pregunta mia: no se porque al hacer una nueva rama y dar push, no fue necesario dar git add y git commit

#fin_